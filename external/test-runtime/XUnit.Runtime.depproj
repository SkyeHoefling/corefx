<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup Condition="'$(TargetGroup)' == 'uap'">
    <TargetFramework>netstandard2.0</TargetFramework>
    <!-- reset parts so that they can be re-inferred -->
    <TargetFrameworkIdentifier />
    <TargetFrameworkVersion />
  </PropertyGroup>
  <PropertyGroup>
    <!-- Given that xunit packages bring with them part of the framework, we need to specify a runtime in order to get the assets
         The only asset that we copy which is RID-specific is sni.dll which is only used in windows, which is why we default to Windows as the RID -->
    <RuntimeIdentifier>win10-$(ArchGroup)</RuntimeIdentifier>
    <!-- Use xunit for arm packages because of not providing armel package in win10 -->
    <RuntimeIdentifier Condition="'$(ArchGroup)' == 'armel'">win10-arm</RuntimeIdentifier>
    <OutputPath>$(RuntimePath)</OutputPath>
    <MicrosoftDotNetUapTestToolsPackageName>microsoft.dotnet.uap.testtools</MicrosoftDotNetUapTestToolsPackageName>
    <!-- Explicitly set Language to c# to handle the analyzer resolution in nuget -->
    <Language Condition="'$(Language)' == ''">c#</Language>
    <!-- Don't warn if some dependencies were rolled forward -->
    <NoWarn>$(NoWarn);NU1603;NU1701</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Condition="'$(TargetsUap)' == 'true'" Include="$(MicrosoftDotNetUapTestToolsPackageName)" Version="$(MicrosoftDotNetUapTestToolsPackageVersion)" />
  </ItemGroup>

  <!-- Retrieve the UAP Tools to the TestHost folder -->
  <Target Name="CopyUAPToolsToTestHost"
          Condition="'$(TargetGroup)' == 'uap'"
          AfterTargets="AfterResolveReferences">

    <PropertyGroup>
      <UAPToolsFolder Condition="'$(UAPToolsFolder)'==''">$(NuGetPackageRoot)$(MicrosoftDotNetUapTestToolsPackageName)\$(MicrosoftDotNetUapTestToolsPackageVersion)\Tools\$(ArchGroup)</UAPToolsFolder>
      <UAPToolsFolder>$(UAPToolsFolder.Replace('/', '\'))</UAPToolsFolder>
    </PropertyGroup>

    <!-- Give a warning that the UAPToolsFolder is not set and that tests won't run -->
    <Warning Condition="('$(UAPToolsFolder)'=='' or !Exists('$(UAPToolsFolder)')) AND '$(BuildAllConfigurations)' != 'true'" Text="Could not find the UAP Tools at '$(UAPToolsFolder)'. Please run restore." />

    <ItemGroup Condition="'$(UAPToolsFolder)'!=''">
      <RunnerFolderContents Include="$(UAPToolsFolder)\Runner\**\*" />
      <LauncherFolderContents Include="$(UAPToolsFolder)\Launcher\**\*" />
    </ItemGroup>

    <Copy Condition="'$(UAPToolsFolder)'!=''"
          SourceFiles="@(RunnerFolderContents)"
          DestinationFolder="$(TestHostRootPath)\Runner\%(RecursiveDir)"
          SkipUnchangedFiles="true"/>

    <Copy Condition="'$(UAPToolsFolder)'!=''"
          SourceFiles="@(LauncherFolderContents)"
          DestinationFolder="$(TestHostRootPath)\Launcher\%(RecursiveDir)"
          SkipUnchangedFiles="true"/>

  </Target>

<<<<<<< HEAD
  <Target Name="AddTestPlatformDependencies"
          Condition="'$(EnableVSTestReferences)' == 'true'"
          BeforeTargets="ResolveReferences">

    <PropertyGroup>
      <TestSdkTFM Condition="'$(TargetsNetFx)' == 'true'">net40</TestSdkTFM>
      <TestSdkTFM Condition="'$(TargetsUap)' == 'true'">uap10.0</TestSdkTFM>
      <TestSdkTFM Condition="'$(TestSdkTFM)' == ''">netcoreapp1.0</TestSdkTFM>
    </PropertyGroup>

    <ItemGroup>
      <_microsoftNetTestSdkAssets Include="$(NuGetPackageRoot)$(MicrosoftNetTestSdkPackageName)\$(MicrosoftNETTestSdkPackageVersion)\build\$(TestSdkTFM)\*.*" />
      <ReferenceCopyLocalPaths Include="@(_microsoftNetTestSdkAssets)">
        <Private>false</Private>
        <NuGetPackageId>$(MicrosoftNetTestSdkPackageName)</NuGetPackageId>
        <NuGetPackageVersion>$(MicrosoftNETTestSdkPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
    </ItemGroup>

    <Error Condition="'@(_microsoftNetTestSdkAssets)' == ''"
           Text="Error: no assets for test sdk package were found under: $(NuGetPackageRoot)$(MicrosoftNetTestSdkPackageName)\$(MicrosoftNETTestSdkPackageVersion)\build\$(TestSdkTFM)\*.*" />

  </Target>

  <Target Name="AddTestPlatformDependenciesNetCore"
          Condition="'$(TargetGroup)' == 'netcoreapp'"
          BeforeTargets="ResolveReferences">

    <Error Condition="!Exists('$(NuGetPackageRoot)$(MicrosoftDotNetXUnitConsoleRunnerPackage)\$(MicrosoftDotNetXUnitConsoleRunnerPackageVersion)\tools\netcoreapp2.1\$(XUnitRunner).dll')"
           Text="Error: looks the package $(NuGetPackageRoot)$(MicrosoftDotNetXUnitConsoleRunnerPackage)\$(MicrosoftDotNetXUnitConsoleRunnerPackageVersion) not restored or missing $(XUnitRunner).dll." />
    <Error Condition="'$(EnableVSTestReferences)' == 'true' AND !Exists('$(NuGetPackageRoot)$(XUnitTestAdapterPackageId)\$(XUnitPackageVersion)\build\netcoreapp1.0\$(XUnitAdapter).dll')"
           Text="Error: looks the package $(NuGetPackageRoot)$(XUnitTestAdapterPackageId)\$(XUnitPackageVersion) not restored or missing $(XUnitAdapter).dll." />
    <Error Condition="'$(EnableVSTestReferences)' == 'true' AND !Exists('$(NuGetPackageRoot)$(TestPlatformHostPackageId)\$(MicrosoftNETTestSdkPackageVersion)\lib\netstandard1.5\$(TestPlatformHost).dll')"
           Text="Error: looks the package $(NuGetPackageRoot)$(TestPlatformHostPackageId)\$(MicrosoftNETTestSdkPackageVersion) not restored or missing $(TestPlatformHost).dll." />

    <ItemGroup>
      <ReferenceCopyLocalPaths Include="$(NuGetPackageRoot)$(MicrosoftDotNetXUnitConsoleRunnerPackage)\$(MicrosoftDotNetXUnitConsoleRunnerPackageVersion)\tools\netcoreapp2.1\*.*" Exclude="$(NuGetPackageRoot)$(MicrosoftDotNetXUnitConsoleRunnerPackage)\$(MicrosoftDotNetXUnitConsoleRunnerPackageVersion)\tools\netcoreapp2.1\xunit.core.dll">
        <Private>false</Private>
        <NuGetPackageId>$(MicrosoftDotNetXUnitConsoleRunnerPackage)</NuGetPackageId>
        <NuGetPackageVersion>$(MicrosoftDotNetXUnitConsoleRunnerPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
      <ReferenceCopyLocalPaths Condition="'$(EnableVSTestReferences)' == 'true'" Include="$(NuGetPackageRoot)$(XUnitTestAdapterPackageId)\$(XUnitPackageVersion)\build\netcoreapp1.0\*.*">
        <Private>false</Private>
        <NuGetPackageId>$(XUnitTestAdapterPackageId)</NuGetPackageId>
        <NuGetPackageVersion>$(XUnitPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
      <ReferenceCopyLocalPaths Condition="'$(EnableVSTestReferences)' == 'true'" Include="$(NuGetPackageRoot)$(TestPlatformHostPackageId)\$(MicrosoftNETTestSdkPackageVersion)\lib\netstandard1.5\$(TestPlatformHost).dll">
        <Private>false</Private>
        <NuGetPackageId>$(TestPlatformHostPackageId)</NuGetPackageId>
        <NuGetPackageVersion>$(MicrosoftNETTestSdkPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
    </ItemGroup>

  </Target>

  <Target Name="AddTestPlatformDependenciesUap"
          Condition="'$(TargetsUap)' == 'true'"
          BeforeTargets="ResolveReferences">

    <Error Condition="'$(EnableVSTestReferences)' == 'true' AND !Exists('$(NuGetPackageRoot)$(XUnitTestAdapterPackageId)\$(XUnitPackageVersion)\build\uap10.0\$(XUnitAdapter).dll')"
            Text="Error: looks the package $(NuGetPackageRoot)$(XUnitTestAdapterPackageId)\$(XUnitPackageVersion) not restored or missing $(XUnitAdapter).dll." />
    <Error Condition="'$(EnableVSTestReferences)' == 'true' AND !Exists('$(NuGetPackageRoot)$(TestPlatformHostPackageId)\$(MicrosoftNETTestSdkPackageVersion)\lib\uap10.0\$(TestPlatformHost).dll')"
            Text="Error: looks the package $(NuGetPackageRoot)$(TestPlatformHostPackageId)\$(MicrosoftNETTestSdkPackageVersion) not restored or missing $(TestPlatformHost).dll." />

    <ItemGroup>
      <ReferenceCopyLocalPaths Condition="'$(EnableVSTestReferences)' == 'true'" Include="$(NuGetPackageRoot)$(XUnitTestAdapterPackageId)\$(XUnitPackageVersion)\build\uap10.0\*.dll">
        <Private>false</Private>
        <NuGetPackageId>$(XUnitTestAdapterPackageId)</NuGetPackageId>
        <NuGetPackageVersion>$(XUnitPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
      <ReferenceCopyLocalPaths Condition="'$(EnableVSTestReferences)' == 'true'" Include="$(NuGetPackageRoot)$(TestPlatformHostPackageId)\$(MicrosoftNETTestSdkPackageVersion)\lib\uap10.0\$(TestPlatformHost).dll">
        <Private>false</Private>
        <NuGetPackageId>$(TestPlatformHostPackageId)</NuGetPackageId>
        <NuGetPackageVersion>$(MicrosoftNETTestSdkPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
    </ItemGroup>

  </Target>

  <Target Name="AddTestPlatformDependenciesAot"
          Condition="'$(TargetsAot)' == 'true'"
          BeforeTargets="ResolveReferences">

    <Error Condition="!Exists('$(NuGetPackageRoot)$(MicrosoftDotNetUapTestToolsPackageName)\$(MicrosoftDotNetUapTestToolsPackageVersion)\lib\netcoreapp2.0\$(XUnitRunner).dll')"
           Text="Error: looks the package $(NuGetPackageRoot)$(MicrosoftDotNetUapTestToolsPackageName)\$(MicrosoftDotNetUapTestToolsPackageVersion) not restored or missing $(XUnitRunner).dll." />
    <Error Condition="!Exists('$(NuGetPackageRoot)xunit.runner.utility\$(XUnitPackageVersion)\lib\netcoreapp1.0\xunit.runner.utility.netcoreapp10.dll')"
           Text="Error: looks the package $(NuGetPackageRoot)xunit.runner.utility\$(XUnitPackageVersion) not restored or missing xunit.runner.utility.netcoreapp10.dll." />

    <ItemGroup>
      <ReferenceCopyLocalPaths Include="$(NuGetPackageRoot)$(MicrosoftDotNetUapTestToolsPackageName)\$(MicrosoftDotNetUapTestToolsPackageVersion)\lib\netcoreapp2.0\*.dll">
        <Private>false</Private>
        <NuGetPackageId>$(MicrosoftDotNetUapTestToolsPackageName)</NuGetPackageId>
        <NuGetPackageVersion>$(MicrosoftDotNetUapTestToolsPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
      <ReferenceCopyLocalPaths Include="$(NuGetPackageRoot)xunit.runner.utility\$(XUnitPackageVersion)\lib\netcoreapp1.0\*.dll">
        <Private>false</Private>
        <NuGetPackageId>xunit.runner.utility</NuGetPackageId>
        <NuGetPackageVersion>$(XUnitPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
    </ItemGroup>

  </Target>

  <Target Name="AddTestPlatformDependenciesNetfx"
          Condition="'$(TargetGroup)' == 'netfx'"
          BeforeTargets="ResolveReferences">

    <Error Condition="!Exists('$(NuGetPackageRoot)$(XUnitRunnerConsolePackageName)\$(XUnitPackageVersion)\tools\net472\$(XUnitRunner).exe')"
           Text="Error: looks the package $(NuGetPackageRoot)$(XUnitRunnerConsolePackageName)\$(XUnitPackageVersion) not restored or missing $(XUnitRunner).exe." />
    <Error Condition="'$(EnableVSTestReferences)' == 'true' AND !Exists('$(NuGetPackageRoot)$(XUnitTestAdapterPackageId)\$(XUnitPackageVersion)\build\_common\$(XUnitAdapter).dll')"
           Text="Error: looks the package $(NuGetPackageRoot)$(XUnitTestAdapterPackageId)\$(XUnitPackageVersion) not restored or missing $(XUnitAdapter).dll." />

    <ItemGroup>
      <ReferenceCopyLocalPaths Include="$(NuGetPackageRoot)$(XUnitRunnerConsolePackageName)\$(XUnitPackageVersion)\tools\net472\*.*"
                               Exclude="$(NuGetPackageRoot)$(XUnitRunnerConsolePackageName)\$(XUnitPackageVersion)\tools\net472\xunit.console.*exe.config">
        <Private>false</Private>
        <NuGetPackageId>$(XUnitRunnerConsolePackageName)</NuGetPackageId>
        <NuGetPackageVersion>$(XUnitPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
      <ReferenceCopyLocalPaths Condition="'$(EnableVSTestReferences)' == 'true'" Include="$(NuGetPackageRoot)$(XUnitTestAdapterPackageId)\$(XUnitPackageVersion)\build\_common\*.*">
        <Private>false</Private>
        <NuGetPackageId>$(XUnitTestAdapterPackageId)</NuGetPackageId>
        <NuGetPackageVersion>$(XUnitPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
    </ItemGroup>

  </Target>

  <Target Name="AddRemoteExecutorLib"
          BeforeTargets="ResolveReferences">

    <Error Condition="!Exists('$(NuGetPackageRoot)$(MicrosoftDotNetRemoteExecutorPackage)\$(MicrosoftDotNetRemoteExecutorPackageVersion)\lib\netstandard2.0\Microsoft.DotNet.RemoteExecutor.dll')"
           Text="Error: looks the package $(NuGetPackageRoot)$(MicrosoftDotNetRemoteExecutorPackage)\$(MicrosoftDotNetRemoteExecutorPackageVersion) not restored or missing Microsoft.DotNet.RemoteExecutor.dll." />

    <ItemGroup>
      <ReferenceCopyLocalPaths Include="$(NuGetPackageRoot)$(MicrosoftDotNetRemoteExecutorPackage)\$(MicrosoftDotNetRemoteExecutorPackageVersion)\lib\netstandard2.0\*.*">
        <Private>false</Private>
        <NuGetPackageId>$(MicrosoftDotNetRemoteExecutorPackage)</NuGetPackageId>
        <NuGetPackageVersion>$(MicrosoftDotNetRemoteExecutorPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
    </ItemGroup>

  </Target>

=======
>>>>>>> Add restore assets for test projects
</Project>
